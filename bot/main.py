import asyncio
import logging
import sqlite3
from datetime import datetime

from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
simple_calendar = SimpleCalendar()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7860468847:AAG1fHL18lU0Rpnq6ey81vv1vWLRWg7frbQ"
DATABASE_NAME = 'todo.db'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')

#  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. task_number –±—É–¥–µ—Ç INTEGER, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å NULL –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏.
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            task_number INTEGER, -- –ü–æ–∑–≤–æ–ª—è–µ–º NULL –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
            description TEXT NOT NULL,
            deadline TEXT
        )
    ''')
    conn.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü task_number
    cursor.execute("PRAGMA table_info(tasks)")
    columns = [col[1] for col in cursor.fetchall()]

    if 'task_number' not in columns:
        # –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–∞ task_number –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        cursor.execute("ALTER TABLE tasks ADD COLUMN task_number INTEGER;")
        conn.commit()

        # –ó–∞–ø–æ–ª–Ω—è–µ–º task_number –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT DISTINCT user_id FROM tasks")
        user_ids = cursor.fetchall()

        for user_id_tuple in user_ids:
            user_id = user_id_tuple[0]
            # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ä—Ç–∏—Ä—É—è –ø–æ id, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫
            cursor.execute("SELECT id FROM tasks WHERE user_id = ? ORDER BY id", (user_id,))
            user_tasks = cursor.fetchall()

            for i, task_id_tuple in enumerate(user_tasks):
                task_id = task_id_tuple[0]
                # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
                cursor.execute("UPDATE tasks SET task_number = ? WHERE id = ?", (i + 1, task_id))
            conn.commit()

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è (user_id, task_number)
    try:
        cursor.execute("CREATE UNIQUE INDEX IF NOT EXISTS idx_user_task_number ON tasks (user_id, task_number);")
        conn.commit()
    except sqlite3.OperationalError as e:
        logging.warning(f"Could not create unique index 'idx_user_task_number': {e}. Please check your database for duplicate (user_id, task_number) pairs if this warning persists.")

    conn.close()


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞
def format_deadline(deadline_str):
    if not deadline_str:
        return ""
    try:
        dt_object = datetime.strptime(deadline_str, '%Y-%m-%d')
        months = [
            "", "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ]
        day = dt_object.day
        month_name = months[dt_object.month]
        current_year = datetime.now().year
        if dt_object.year == current_year:
            return f"{day} {month_name}"
        else:
            return f"{day} {month_name} {dt_object.year}"
    except ValueError:
        return deadline_str


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AddTask(StatesGroup):
    waiting_for_description = State()
    waiting_for_deadline = State()

class EditTask(StatesGroup):
    waiting_for_task_number = State()
    waiting_for_new_data = State()
    waiting_for_new_description = State()
    waiting_for_new_deadline = State()

class DeleteTask(StatesGroup):
    waiting_for_task_number = State()
    waiting_for_confirmation = State()

#—Ä–æ—É—Ç–µ—Ä—ã
welcome_router = Router()
task_router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@welcome_router.message(Command("start"))
async def start_command(message: types.Message):
    welcome_text = """
–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π ToDo –±–æ—Ç!üëã

–Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —Ç–≤–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –°–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å –ª–µ–≥–∫–æ:

   ‚úç –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–µ–ª–∞ ‚Äî –æ—Ç —Å–∞–º—ã—Ö –º–µ–ª–∫–∏—Ö –∑–∞–º–µ—Ç–æ–∫ –¥–æ –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
   ‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å.
   üîî –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç–∞–π–º–µ—Ä—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤–æ–≤—Ä–µ–º—è –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –∏ —É—Å–ø–µ–≤–∞—Ç—å –≤ —Å—Ä–æ–∫.

–ó–∞–±—É–¥—å –æ –∑–∞–±—ã—Ç—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö!
–ù–∞—á–Ω–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π /add_task
–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π /list_tasks
–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π /edit_task
–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π /delete_task
"""
    await message.answer(welcome_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@task_router.message(Command("add_task"))
async def cmd_add_task(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å? –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É.", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddTask.waiting_for_description)


@task_router.message(AddTask.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(description=message.text)
    # –í–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–µ–¥–ª–∞–π–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–µ–¥–ª–∞–π–Ω) —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
                         reply_markup=await simple_calendar.start_calendar())
    await state.set_state(AddTask.waiting_for_deadline)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@task_router.callback_query(SimpleCalendarCallback.filter(), AddTask.waiting_for_deadline)
async def process_add_deadline_calendar(callback_query: types.CallbackQuery, callback_data: SimpleCalendarCallback,
                                        state: FSMContext):
    selected, date = await simple_calendar.process_selection(callback_query, callback_data)
    if selected:
        user_id = callback_query.from_user.id
        data = await state.get_data()
        description = data['description']
        deadline_str = f"{date.strftime('%Y-%m-%d')}"

        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()

        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π task_number –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π task_number –∏–ª–∏ 0, –µ—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç
        cursor.execute("SELECT MAX(task_number) FROM tasks WHERE user_id = ?", (user_id,))
        max_task_number = cursor.fetchone()[0]
        new_task_number = (max_task_number or 0) + 1

        cursor.execute("INSERT INTO tasks (user_id, task_number, description, deadline) VALUES (?, ?, ?, ?)",
                       (user_id, new_task_number, description, deadline_str))
        conn.commit()
        conn.close()

        formatted_deadline_display = format_deadline(deadline_str)
        await callback_query.message.edit_text(
            f"–ó–∞–¥–∞—á–∞ '{description}' (–ù–æ–º–µ—Ä: {new_task_number}) —Å–æ —Å—Ä–æ–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è '{formatted_deadline_display}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–•–æ—Ç–∏—Ç–µ –µ—â—ë? /add_task \n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏: /list_tasks")
        await state.clear()
        await callback_query.answer()
    else:
        await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á
@task_router.message(Command("list_tasks"))
async def cmd_list_tasks(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    # –í—ã–±–∏—Ä–∞–µ–º task_number –≤–º–µ—Å—Ç–æ id –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    cursor.execute("SELECT task_number, description, deadline FROM tasks WHERE user_id = ? ORDER BY task_number", (user_id,))
    tasks = cursor.fetchall()
    conn.close()

    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    response = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks:
        task_number, description, deadline = task # task_number - —ç—Ç–æ –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formatted_deadline = format_deadline(deadline)
        deadline_str = f" (–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {formatted_deadline})" if formatted_deadline else ""
        response += f"–ù–æ–º–µ—Ä: {task_number}.\n   –ó–∞–¥–∞—á–∞: {description}{deadline_str}\n"

    await message.answer(response, reply_markup=types.ReplyKeyboardRemove())


#  –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@task_router.message(Command("edit_task"))
async def cmd_edit_task(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    # –í—ã–±–∏—Ä–∞–µ–º task_number –≤–º–µ—Å—Ç–æ id –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    cursor.execute("SELECT task_number, description, deadline FROM tasks WHERE user_id = ? ORDER BY task_number", (user_id,))
    tasks = cursor.fetchall()
    conn.close()

    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.clear()
        return

    response = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —É–∫–∞–∑–∞–≤ –µ—ë –Ω–æ–º–µ—Ä:\n\n"
    for task_number, description, deadline in tasks:
        formatted_deadline = format_deadline(deadline)
        deadline_str = f" (–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {formatted_deadline})" if formatted_deadline else ""
        response += f"–ù–æ–º–µ—Ä: {task_number}\n   –ó–∞–¥–∞—á–∞: {description}{deadline_str}\n"
    response += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å."

    await message.answer(response, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(EditTask.waiting_for_task_number)


@task_router.message(EditTask.waiting_for_task_number)
async def process_edit_task_number(message: types.Message, state: FSMContext):
    try:
        user_provided_task_number = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        return

    user_id = message.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    # –ò—â–µ–º –∑–∞–¥–∞—á—É –ø–æ user_id –∏ user_provided_task_number, –ø–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id
    cursor.execute("SELECT id, task_number, description, deadline FROM tasks WHERE user_id = ? AND task_number = ?", (user_id, user_provided_task_number))
    task = cursor.fetchone()
    conn.close()

    if not task:
        await message.answer("–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    internal_db_id = task[0]
    task_number_for_user = task[1]

    await state.update_data(editing_internal_db_id=internal_db_id, editing_task_number=task_number_for_user)
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ"), types.KeyboardButton(text="–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")],
            [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    formatted_current_deadline_display = format_deadline(task[3]) # deadline –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ task[3]
    deadline_display = f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {formatted_current_deadline_display}" if formatted_current_deadline_display else "–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –Ω–µ —É–∫–∞–∑–∞–Ω"

    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É:\n–ù–æ–º–µ—Ä: {task_number_for_user}\n–ó–∞–¥–∞—á–∞: {task[2]}\n{deadline_display}\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", # task[2] - —ç—Ç–æ description
        reply_markup=keyboard)
    await state.set_state(EditTask.waiting_for_new_data)


@task_router.message(EditTask.waiting_for_new_data, F.text.in_({"–û–ø–∏—Å–∞–Ω–∏–µ", "–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "–û—Ç–º–µ–Ω–∞"}))
async def process_edit_field_selection(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    if message.text == "–û–ø–∏—Å–∞–Ω–∏–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(EditTask.waiting_for_new_description)
    elif message.text == "–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
                             reply_markup=await simple_calendar.start_calendar())
        await state.set_state(EditTask.waiting_for_new_deadline)


@task_router.message(EditTask.waiting_for_new_description)
async def process_new_description(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–æ–º.")
        return

    data = await state.get_data()
    internal_db_id = data['editing_internal_db_id'] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    task_number_for_user = data['editing_task_number'] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    new_description = message.text

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE tasks SET description = ? WHERE id = ? AND user_id = ?",
                   (new_description, internal_db_id, message.from_user.id)) # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É id
    conn.commit()
    conn.close()

    if cursor.rowcount > 0:
        await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–ù–æ–º–µ—Ä: {task_number_for_user}) –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: '{new_description}'")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@task_router.callback_query(SimpleCalendarCallback.filter(), EditTask.waiting_for_new_deadline)
async def process_edit_deadline_calendar(callback_query: types.CallbackQuery, callback_data: SimpleCalendarCallback,
                                         state: FSMContext):
    selected, date = await simple_calendar.process_selection(callback_query, callback_data)
    if selected:
        data = await state.get_data()
        internal_db_id = data['editing_internal_db_id'] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        task_number_for_user = data['editing_task_number'] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        user_id = callback_query.from_user.id
        deadline_str = f"{date.strftime('%Y-%m-%d')}"

        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET deadline = ? WHERE id = ? AND user_id = ?",
                       (deadline_str, internal_db_id, user_id)) # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É id
        conn.commit()
        conn.close()

        if cursor.rowcount > 0:
            formatted_deadline_display = format_deadline(deadline_str)
            await callback_query.message.edit_text(
                f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–ù–æ–º–µ—Ä: {task_number_for_user}) –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: '{formatted_deadline_display}'")
        else:
            await callback_query.message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
        await state.clear()
        await callback_query.answer()
    else:
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å –≤—ã–±–æ—Ä –¥–∞—Ç—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª
        await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@task_router.message(Command("delete_task"))
async def cmd_delete_task(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    # –í—ã–±–∏—Ä–∞–µ–º task_number –≤–º–µ—Å—Ç–æ id –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    cursor.execute("SELECT task_number, description, deadline FROM tasks WHERE user_id = ? ORDER BY task_number", (user_id,))
    tasks = cursor.fetchall()
    conn.close()

    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await state.clear()
        return

    response = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, —É–∫–∞–∑–∞–≤ –µ—ë –Ω–æ–º–µ—Ä:\n\n"
    for task_number, description, deadline in tasks:
        formatted_deadline = format_deadline(deadline)
        deadline_str = f" (–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {formatted_deadline})" if formatted_deadline else ""
        response += f"–ù–æ–º–µ—Ä: {task_number}\n   –ó–∞–¥–∞—á–∞: {description}{deadline_str}\n"
    response += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å."

    await message.answer(response)
    await state.set_state(DeleteTask.waiting_for_task_number)


@task_router.message(DeleteTask.waiting_for_task_number)
async def process_delete_task_number(message: types.Message, state: FSMContext):
    try:
        user_provided_task_number = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        return

    user_id = message.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    # –ò—â–µ–º –∑–∞–¥–∞—á—É –ø–æ user_id –∏ user_provided_task_number, –ø–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id
    cursor.execute("SELECT id, task_number, description, deadline FROM tasks WHERE user_id = ? AND task_number = ?", (user_id, user_provided_task_number))
    task = cursor.fetchone()
    conn.close()

    if not task:
        await message.answer("–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return

    internal_db_id = task[0]
    task_number_for_user = task[1]
    task_description = task[2] # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

    await state.update_data(deleting_internal_db_id=internal_db_id, deleting_task_number=task_number_for_user, deleting_task_desc=task_description)

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–î–∞"), types.KeyboardButton(text="–ù–µ—Ç")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É (–ù–æ–º–µ—Ä: {task_number_for_user}): '{task_description}'? (–î–∞/–ù–µ—Ç)", # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                         reply_markup=keyboard)
    await state.set_state(DeleteTask.waiting_for_confirmation)


@task_router.message(DeleteTask.waiting_for_confirmation, F.text.in_({"–î–∞", "–ù–µ—Ç"}))
async def process_delete_confirmation(message: types.Message, state: FSMContext):
    if message.text == "–î–∞":
        data = await state.get_data()
        internal_db_id = data['deleting_internal_db_id'] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        task_number_for_user = data['deleting_task_number'] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        task_description = data['deleting_task_desc']
        user_id = message.from_user.id

        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM tasks WHERE id = ? AND user_id = ?", (internal_db_id, user_id)) # –£–¥–∞–ª—è–µ–º –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É id
        conn.commit()
        conn.close()

        if cursor.rowcount > 0:
            await message.answer(f"–ó–∞–¥–∞—á–∞ '{task_description}' (–ù–æ–º–µ—Ä: {task_number_for_user}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                                 reply_markup=types.ReplyKeyboardRemove())
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.",
                                 reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    init_db()
    dp.include_router(welcome_router)
    dp.include_router(task_router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

