import asyncio
import logging
import sqlite3
from datetime import datetime

from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

TOKEN = "7860468847:AAG1fHL18lU0Rpnq6ey81vv1vWLRWg7frbQ"
DATABASE_NAME = 'todo.db'

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            description TEXT NOT NULL,
            deadline TEXT
        )
    ''')
    conn.commit()
    conn.close()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AddTask(StatesGroup):
    waiting_for_description = State()
    waiting_for_deadline = State()

class EditTask(StatesGroup):
    waiting_for_task_id = State()
    waiting_for_new_data = State()
    waiting_for_new_description = State()
    waiting_for_new_deadline = State()

class DeleteTask(StatesGroup):
    waiting_for_task_id = State()
    waiting_for_confirmation = State()

# –†–æ—É—Ç–µ—Ä—ã
welcome_router = Router()
task_router = Router()

@welcome_router.message(Command("start"))
async def start_command(message: types.Message):
    welcome_text = """
–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π ToDo –±–æ—Ç!üëã

–Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —Ç–≤–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –°–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å –ª–µ–≥–∫–æ:

   ‚úç –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–µ–ª–∞ ‚Äî –æ—Ç —Å–∞–º—ã—Ö –º–µ–ª–∫–∏—Ö –∑–∞–º–µ—Ç–æ–∫ –¥–æ –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
   ‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å.
   üîî –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç–∞–π–º–µ—Ä—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤–æ–≤—Ä–µ–º—è –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –∏ —É—Å–ø–µ–≤–∞—Ç—å –≤ —Å—Ä–æ–∫.

–ó–∞–±—É–¥—å –æ –∑–∞–±—ã—Ç—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö!
–ù–∞—á–Ω–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π /add_task
–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π /list_tasks
–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π /edit_task
–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π /delete_task
"""
    await message.answer(welcome_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@task_router.message(Command("add_task"))
async def cmd_add_task(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å? –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É.")
    await state.set_state(AddTask.waiting_for_description)

@task_router.message(AddTask.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(description=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–µ–¥–ª–∞–π–Ω) –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-12-31 18:00). –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –Ω–µ –Ω—É–∂–µ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
    await state.set_state(AddTask.waiting_for_deadline)

@task_router.message(AddTask.waiting_for_deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    description = data['description']
    deadline = message.text.strip()

    if deadline.lower() == '–Ω–µ—Ç':
        deadline = None
    else:
        try:
            # –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞
            datetime.strptime(deadline, '%Y-%m-%d %H:%M')
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
            return

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO tasks (user_id, description, deadline) VALUES (?, ?, ?)",
                   (user_id, description, deadline))
    conn.commit()
    conn.close()

    await message.answer(f"–ó–∞–¥–∞—á–∞ '{description}' —Å –¥–µ–¥–ª–∞–π–Ω–æ–º '{deadline if deadline else '–Ω–µ —É–∫–∞–∑–∞–Ω'}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á
@task_router.message(Command("list_tasks"))
async def cmd_list_tasks(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id, description, deadline FROM tasks WHERE user_id = ?", (user_id,))
    tasks = cursor.fetchall()
    conn.close()

    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    response = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:\n\n"
    for i, task in enumerate(tasks):
        task_id, description, deadline = task
        deadline_str = f" (–î–µ–¥–ª–∞–π–Ω: {deadline})" if deadline else ""
        response += f"{i+1}. ID: {task_id}\n   –ó–∞–¥–∞—á–∞: {description}{deadline_str}\n"

    await message.answer(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@task_router.message(Command("edit_task"))
async def cmd_edit_task(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id, description, deadline FROM tasks WHERE user_id = ?", (user_id,))
    tasks = cursor.fetchall()
    conn.close()

    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.clear()
        return

    response = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —É–∫–∞–∑–∞–≤ –µ—ë ID:\n\n"
    for task_id, description, deadline in tasks:
        deadline_str = f" (–î–µ–¥–ª–∞–π–Ω: {deadline})" if deadline else ""
        response += f"ID: {task_id}\n   –ó–∞–¥–∞—á–∞: {description}{deadline_str}\n"
    response += "\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å."

    await message.answer(response)
    await state.set_state(EditTask.waiting_for_task_id)

@task_router.message(EditTask.waiting_for_task_id)
async def process_edit_task_id(message: types.Message, state: FSMContext):
    try:
        task_id = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–¥–∞—á–∏.")
        return

    user_id = message.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id, description, deadline FROM tasks WHERE user_id = ? AND id = ?", (user_id, task_id))
    task = cursor.fetchone()
    conn.close()

    if not task:
        await message.answer("–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return

    await state.update_data(editing_task_id=task_id)
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ"), types.KeyboardButton(text="–î–µ–¥–ª–∞–π–Ω")],
            [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É:\nID: {task[0]}\n–ó–∞–¥–∞—á–∞: {task[1]}\n–î–µ–¥–ª–∞–π–Ω: {task[2] if task[2] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
    await state.set_state(EditTask.waiting_for_new_data)

@task_router.message(EditTask.waiting_for_new_data, F.text.in_({"–û–ø–∏—Å–∞–Ω–∏–µ", "–î–µ–¥–ª–∞–π–Ω", "–û—Ç–º–µ–Ω–∞"}))
async def process_edit_field_selection(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    if message.text == "–û–ø–∏—Å–∞–Ω–∏–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(EditTask.waiting_for_new_description)
    elif message.text == "–î–µ–¥–ª–∞–π–Ω":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-12-31 18:00). –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –Ω–µ –Ω—É–∂–µ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(EditTask.waiting_for_new_deadline)

@task_router.message(EditTask.waiting_for_new_description)
async def process_new_description(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–æ–º.")
        return

    data = await state.get_data()
    task_id = data['editing_task_id']
    new_description = message.text

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE tasks SET description = ? WHERE id = ? AND user_id = ?",
                   (new_description, task_id, message.from_user.id))
    conn.commit()
    conn.close()

    if cursor.rowcount > 0:
        await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (ID: {task_id}) –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: '{new_description}'")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
    await state.clear()

@task_router.message(EditTask.waiting_for_new_deadline)
async def process_new_deadline(message: types.Message, state: FSMContext):
    data = await state.get_data()
    task_id = data['editing_task_id']
    new_deadline = message.text.strip()

    if new_deadline.lower() == '–Ω–µ—Ç':
        new_deadline = None
    else:
        try:
            datetime.strptime(new_deadline, '%Y-%m-%d %H:%M')
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
            return

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE tasks SET deadline = ? WHERE id = ? AND user_id = ?",
                   (new_deadline, task_id, message.from_user.id))
    conn.commit()
    conn.close()

    if cursor.rowcount > 0:
        await message.answer(f"–î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ (ID: {task_id}) –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: '{new_deadline if new_deadline else '–Ω–µ —É–∫–∞–∑–∞–Ω'}'")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@task_router.message(Command("delete_task"))
async def cmd_delete_task(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id, description, deadline FROM tasks WHERE user_id = ?", (user_id,))
    tasks = cursor.fetchall()
    conn.close()

    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await state.clear()
        return

    response = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, —É–∫–∞–∑–∞–≤ –µ—ë ID:\n\n"
    for task_id, description, deadline in tasks:
        deadline_str = f" (–î–µ–¥–ª–∞–π–Ω: {deadline})" if deadline else ""
        response += f"ID: {task_id}\n   –ó–∞–¥–∞—á–∞: {description}{deadline_str}\n"
    response += "\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å."

    await message.answer(response)
    await state.set_state(DeleteTask.waiting_for_task_id)

@task_router.message(DeleteTask.waiting_for_task_id)
async def process_delete_task_id(message: types.Message, state: FSMContext):
    try:
        task_id = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–¥–∞—á–∏.")
        return

    user_id = message.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id, description, deadline FROM tasks WHERE user_id = ? AND id = ?", (user_id, task_id))
    task = cursor.fetchone()
    conn.close()

    if not task:
        await message.answer("–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return

    await state.update_data(deleting_task_id=task_id, deleting_task_desc=task[1])

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–î–∞"), types.KeyboardButton(text="–ù–µ—Ç")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É (ID: {task[0]}): '{task[1]}'? (–î–∞/–ù–µ—Ç)", reply_markup=keyboard)
    await state.set_state(DeleteTask.waiting_for_confirmation)

@task_router.message(DeleteTask.waiting_for_confirmation, F.text.in_({"–î–∞", "–ù–µ—Ç"}))
async def process_delete_confirmation(message: types.Message, state: FSMContext):
    if message.text == "–î–∞":
        data = await state.get_data()
        task_id = data['deleting_task_id']
        task_description = data['deleting_task_desc']
        user_id = message.from_user.id

        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM tasks WHERE id = ? AND user_id = ?", (task_id, user_id))
        conn.commit()
        conn.close()

        if cursor.rowcount > 0:
            await message.answer(f"–ó–∞–¥–∞—á–∞ '{task_description}' (ID: {task_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    init_db()
    dp.include_router(welcome_router)
    dp.include_router(task_router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

