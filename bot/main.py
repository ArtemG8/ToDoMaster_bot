import asyncio
import logging
import sqlite3
from dotenv import load_dotenv
import os
load_dotenv()
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
import aiogram.exceptions

from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback

simple_calendar = SimpleCalendar()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_NAME = 'todo.db'
welcome_text = """
–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π ToDo –±–æ—Ç!üëã

–Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —Ç–≤–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –°–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å –ª–µ–≥–∫–æ:

   ‚úç –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–µ–ª–∞ ‚Äî –æ—Ç —Å–∞–º—ã—Ö –º–µ–ª–∫–∏—Ö –∑–∞–º–µ—Ç–æ–∫ –¥–æ –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
   ‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å.
   üîî –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç–∞–π–º–µ—Ä—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤–æ–≤—Ä–µ–º—è –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –∏ —É—Å–ø–µ–≤–∞—Ç—å –≤ —Å—Ä–æ–∫.

–ó–∞–±—É–¥—å –æ –∑–∞–±—ã—Ç—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö!
–ù–∞—á–Ω–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π /add_task
–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π /list_tasks
–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π /edit_task
–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π /delete_task
"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(os.getenv("TOKEN"))
dp = Dispatcher()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')


#  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–¥–∞—á, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    #–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü remind_me
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            task_number INTEGER,
            description TEXT NOT NULL,
            deadline TEXT,
            status TEXT DEFAULT 'active',
            remind_me INTEGER DEFAULT 0 -- 0: –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, 1: –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å
        )
    ''')
    conn.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü task_number, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute("PRAGMA table_info(tasks)")
    columns = [col[1] for col in cursor.fetchall()]

    if 'task_number' not in columns:
        cursor.execute("ALTER TABLE tasks ADD COLUMN task_number INTEGER;")
        conn.commit()
        # –ó–∞–ø–æ–ª–Ω—è–µ–º task_number –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        cursor.execute("SELECT DISTINCT user_id FROM tasks")
        user_ids = cursor.fetchall()
        for user_id_tuple in user_ids:
            user_id = user_id_tuple[0]
            cursor.execute("SELECT id FROM tasks WHERE user_id = ? ORDER BY id", (user_id,))
            user_tasks = cursor.fetchall()
            for i, task_id_tuple in enumerate(user_tasks):
                task_id = task_id_tuple[0]
                cursor.execute("UPDATE tasks SET task_number = ? WHERE id = ?", (i + 1, task_id))
            conn.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü status, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'status' not in columns:
        cursor.execute("ALTER TABLE tasks ADD COLUMN status TEXT DEFAULT 'active';")
        conn.commit()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –∏–º–µ–ª–∏ —Å—Ç–∞—Ç—É—Å 'active'
        cursor.execute("UPDATE tasks SET status = 'active' WHERE status IS NULL;")
        conn.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü remind_me, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'remind_me' not in columns:
        cursor.execute("ALTER TABLE tasks ADD COLUMN remind_me INTEGER DEFAULT 0;")
        conn.commit()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã remind_me –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—ã–ª 0
        cursor.execute("UPDATE tasks SET remind_me = 0 WHERE remind_me IS NULL;")
        conn.commit()

    try:
        cursor.execute("CREATE UNIQUE INDEX IF NOT EXISTS idx_user_task_number ON tasks (user_id, task_number);")
        conn.commit()
    except sqlite3.OperationalError as e:
        logging.warning(
            f"Could not create unique index 'idx_user_task_number': {e}. Please check your database for duplicate (user_id, task_number) pairs if this warning persists.")

    #  –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã)
    # –≠—Ç–æ –∑–∞–º–µ–Ω–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–∞–±–ª–∏—Ü—É `reminders`
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_reminder_status (
            user_id INTEGER PRIMARY KEY,
            last_reminded_at TEXT -- –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:SS
        )
    ''')
    conn.commit()
    conn.close()


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞
def format_deadline(deadline_str):
    if not deadline_str:
        return ""
    try:
        dt_object = datetime.strptime(deadline_str, '%Y-%m-%d')
        months = [
            "", "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ]
        day = dt_object.day
        month_name = months[dt_object.month]
        current_year = datetime.now().year
        if dt_object.year == current_year:
            return f"{day} {month_name}"
        else:
            return f"{day} {month_name} {dt_object.year}"
    except ValueError:
        return deadline_str


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AddTask(StatesGroup):
    waiting_for_description = State()
    waiting_for_deadline = State()


class EditTask(StatesGroup):
    waiting_for_new_data = State()
    waiting_for_new_description = State()
    waiting_for_new_deadline = State()


class DeleteTask(StatesGroup):
    waiting_for_confirmation = State()


# —Ä–æ—É—Ç–µ—Ä—ã
welcome_router = Router()
task_router = Router()

PAGE_SIZE = 5  # –ö–æ–ª-–≤–æ –∑–∞–¥–∞—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏


class TaskListFilterCallback(CallbackData, prefix="task_filter"):
    filter_type: str  # 'today', 'week', 'month', 'all', 'history_all'


class TaskActionCallback(CallbackData, prefix="task_action"):
    action: str  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 'complete_task_today', 'complete_task_week' –∏ —Ç.–¥.


class CompleteTaskCallback(CallbackData, prefix="complete_task"):
    filter_type: str  # 'today', 'week', 'month', 'all'
    page: int = 0  # —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    task_number: int | None = None  # –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (None ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞)

# –ù–æ–≤—ã–µ CallbackData –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
class EditTaskCallback(CallbackData, prefix="edit_task"):
    page: int = 0
    task_number: int | None = None
    action: str = "view"  # 'view' for pagination, 'select' for selecting a task

class DeleteTaskCallback(CallbackData, prefix="delete_task"):
    page: int = 0
    task_number: int | None = None
    action: str = "view"  # 'view' for pagination, 'select' for selecting a task


# –ù–æ–≤–∞—è CallbackData –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
class MainMenuCallback(CallbackData, prefix="main_menu"):
    action: str = "show"

#  CallbackData –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
class EnableReminderForTaskCallback(CallbackData, prefix="enable_task_rem"):
    task_internal_id: int

#  CallbackData –¥–ª—è –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
class RemindersMenuCallback(CallbackData, prefix="rem_menu"):
    page: int = 0
    action: str = "view" # 'view', 'remove_task_reminder', 'disable_all'

#  CallbackData –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
class RemoveTaskReminderCallback(CallbackData, prefix="remove_task_rem"):
    task_internal_id: int
    current_page: int = 0 # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è

#  CallbackData –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
class DisableAllRemindersCallback(CallbackData, prefix="disable_all_rem"):
    pass


# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
def get_main_menu_inline_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=MainMenuCallback().pack()))
    return builder.as_markup()

# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def get_reminder_confirmation_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        callback_data=RemindersMenuCallback(page=0, action="view").pack()
    ))
    builder.add(types.InlineKeyboardButton(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data=MainMenuCallback().pack()
    ))
    builder.adjust(1) # –ö–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    return builder.as_markup()


@task_router.callback_query(MainMenuCallback.filter())
async def process_main_menu_callback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(welcome_text, reply_markup=None)
    await callback_query.answer()

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –∫–Ω–æ–ø–∫–æ–π "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"
def get_task_list_keyboard(current_filter: str = None):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
        callback_data=TaskListFilterCallback(filter_type="today").pack()
    ))
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞ –Ω–µ–¥–µ–ª—é",
        callback_data=TaskListFilterCallback(filter_type="week").pack()
    ))
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞ –º–µ—Å—è—Ü",
        callback_data=TaskListFilterCallback(filter_type="month").pack()
    ))
    builder.add(types.InlineKeyboardButton(
        text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ",
        callback_data=TaskListFilterCallback(filter_type="all").pack()
    ))
    if current_filter != "history_all":
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é all)
        builder.add(types.InlineKeyboardButton(
            text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É",
            callback_data=TaskActionCallback(action="complete_task_" + (current_filter or "all")).pack()
        ))
    builder.add(types.InlineKeyboardButton(
        text="–ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á",
        callback_data=TaskListFilterCallback(filter_type="history_all").pack()
    ))
    builder.adjust(2)
    return builder.as_markup()


# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞–¥–∞—á –¥–ª—è –≤—ã–±–æ—Ä–∞ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
def build_task_selection_keyboard(tasks, callback_constructor, page=0):
    builder = InlineKeyboardBuilder()
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    page_tasks = tasks[start:end]

    # Handle case where the current page becomes empty after an action (e.g., deletion)
    if not page_tasks and page > 0:
        # Try to navigate to the previous page
        return build_task_selection_keyboard(tasks, callback_constructor, page - 1)
    elif not page_tasks: # No tasks at all or on first page with no tasks
        builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=MainMenuCallback().pack()))
        return builder.as_markup()

    for task_number, description, deadline in page_tasks:
        formatted_deadline = format_deadline(deadline)
        deadline_str = f" ({formatted_deadline})" if formatted_deadline else ""
        # Shorten description for button text if too long
        button_text = f"{task_number}. {description[:30]}{'...' if len(description) > 30 else ''}{deadline_str}"

        builder.row(types.InlineKeyboardButton(
            text=button_text,
            callback_data=callback_constructor(page=page, task_number=task_number, action="select").pack()
        ))

    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=callback_constructor(page=page - 1, action="view").pack()
        ))
    if end < len(tasks):
        nav_buttons.append(types.InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=callback_constructor(page=page + 1, action="view").pack()
        ))
    if nav_buttons:
        builder.row(*nav_buttons)

    builder.row(types.InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=MainMenuCallback().pack()
    ))
    return builder.as_markup()


def build_complete_task_keyboard(tasks, filter_type, page=0):
    builder = InlineKeyboardBuilder()
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    page_tasks = tasks[start:end]

    if not page_tasks and page > 0:
        return build_complete_task_keyboard(tasks, filter_type, page - 1)
    elif not page_tasks:
        builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=TaskListFilterCallback(filter_type=filter_type).pack()))
        return builder.as_markup()


    for task_number, description, deadline in page_tasks:
        formatted_deadline = format_deadline(deadline)
        deadline_str = f" ‚úÖ({formatted_deadline})" if formatted_deadline else ""
        button_text = f"{task_number}{deadline_str}"

        builder.row(types.InlineKeyboardButton(
            text=button_text,
            callback_data=CompleteTaskCallback(filter_type=filter_type, page=page, task_number=task_number).pack()
        ))

    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=CompleteTaskCallback(filter_type=filter_type, page=page - 1).pack()
        ))
    if end < len(tasks):
        nav_buttons.append(types.InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=CompleteTaskCallback(filter_type=filter_type, page=page + 1).pack()
        ))
    if nav_buttons:
        builder.row(*nav_buttons)

    builder.row(types.InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ",
        callback_data=TaskListFilterCallback(filter_type=filter_type).pack()
    ))
    return builder.as_markup()


def build_edit_task_keyboard(tasks, page=0):
    return build_task_selection_keyboard(tasks, EditTaskCallback, page)

def build_delete_task_keyboard(tasks, page=0):
    return build_task_selection_keyboard(tasks, DeleteTaskCallback, page)

#  –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def build_reminders_keyboard(tasks, page=0):
    builder = InlineKeyboardBuilder()
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    page_tasks = tasks[start:end]

    if not page_tasks and page > 0:
        return build_reminders_keyboard(tasks, page - 1)
    elif not page_tasks:
        builder.row(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=MainMenuCallback().pack()))
        return builder.as_markup()

    for internal_id, task_number, description, deadline in page_tasks: # –ü–æ–ª—É—á–∞–µ–º internal_id
        formatted_deadline = format_deadline(deadline)
        deadline_str = f" ({formatted_deadline})" if formatted_deadline else ""
        button_text = f"‚úÖ {task_number}. {description[:30]}{'...' if len(description) > 30 else ''}{deadline_str}"

        builder.row(types.InlineKeyboardButton(
            text=button_text,
            callback_data=RemoveTaskReminderCallback(task_internal_id=internal_id, current_page=page).pack()
        ))

    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=RemindersMenuCallback(page=page - 1, action="view").pack()
        ))
    if end < len(tasks):
        nav_buttons.append(types.InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=RemindersMenuCallback(page=page + 1, action="view").pack()
        ))
    if nav_buttons:
        builder.row(*nav_buttons)

    builder.row(types.InlineKeyboardButton(
        text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        callback_data=DisableAllRemindersCallback().pack()
    ))
    builder.row(types.InlineKeyboardButton(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data=MainMenuCallback().pack()
    ))
    return builder.as_markup()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –∏ —Å—Ç–∞—Ç—É—Å–æ–º
def get_tasks_for_user(user_id: int, filter_type: str, status_filter: str = 'active', remind_me_filter: bool = None):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    query = "SELECT id, task_number, description, deadline FROM tasks WHERE user_id = ? AND status = ?"
    params = [user_id, status_filter]

    if remind_me_filter is not None:
        query += " AND remind_me = ?"
        params.append(1 if remind_me_filter else 0)

    current_date = datetime.now()

    if filter_type == "today":
        query += " AND deadline = ?"
        params.append(current_date.strftime('%Y-%m-%d'))
    elif filter_type == "week":
        start_of_week = current_date - timedelta(days=current_date.weekday())
        end_of_week = start_of_week + timedelta(days=6)
        query += " AND deadline BETWEEN ? AND ?"
        params.extend([start_of_week.strftime('%Y-%m-%d'), end_of_week.strftime('%Y-%m-%d')])
    elif filter_type == "month":
        query += " AND strftime('%Y-%m', deadline) = strftime('%Y-%m', ?)"
        params.append(current_date.strftime('%Y-%m-%d'))

    query += " ORDER BY task_number"
    cursor.execute(query, tuple(params))
    tasks = cursor.fetchall()
    conn.close()
    return tasks


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (–ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ)
async def send_task_list(target_message_or_query: types.Message | types.CallbackQuery, user_id: int,
                         task_limit: int = None, filter_type: str = None, status_filter: str = 'active'):
    tasks = get_tasks_for_user(user_id, filter_type=filter_type or "all", status_filter=status_filter)

    response = ""
    if not tasks:
        if status_filter == 'active':
            if filter_type == "today":
                response = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
            elif filter_type == "week":
                response = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é."
            elif filter_type == "month":
                response = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü."
            else:
                response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."
        else:
            response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
    else:
        response_header = ""
        if status_filter == 'active':
            if filter_type == "today":
                response_header = "üóì –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            elif filter_type == "week":
                response_header = "üóì –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n\n"
            elif filter_type == "month":
                response_header = "üóì –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n\n"
            elif task_limit:
                response_header = "üìû –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:\n\n"
            elif filter_type == "all":
                response_header = "üóì –í–∞—à–∏ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
        else:
            response_header = "üèÜ –í–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"

        response = response_header
        selected_tasks = tasks if not task_limit else tasks[-5::1]
        # –ò–∑–º–µ–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ get_tasks_for_user —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id
        for internal_id, task_number, description, deadline in selected_tasks:
            formatted_deadline = format_deadline(deadline)
            deadline_str = f" (–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {formatted_deadline})" if formatted_deadline else ""
            response += f"–ù–æ–º–µ—Ä: {task_number}.\n   –ó–∞–¥–∞—á–∞: {description}{deadline_str}\n"

    keyboard = get_task_list_keyboard(filter_type)  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä

    if isinstance(target_message_or_query, types.Message):
        await target_message_or_query.answer(response, reply_markup=keyboard)
    elif isinstance(target_message_or_query, types.CallbackQuery):
        current_text = target_message_or_query.message.text or ""
        current_reply_markup = target_message_or_query.message.reply_markup

        def get_keyboard_data(markup: types.InlineKeyboardMarkup):
            if not markup:
                return None
            return [[button.model_dump() for button in row] for row in markup.inline_keyboard]

        new_keyboard_data = get_keyboard_data(keyboard)
        current_keyboard_data = get_keyboard_data(current_reply_markup)

        if response == current_text and new_keyboard_data == current_keyboard_data:
            logging.info("Skipping message edit: content and markup are identical.")
        else:
            try:
                await target_message_or_query.message.edit_text(
                    text=response,
                    reply_markup=keyboard
                )
            except aiogram.exceptions.TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    logging.info("Caught TelegramBadRequest: message not modified. Ignoring.")
                else:
                    raise e


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@welcome_router.message(Command("start"))
async def start_command(message: types.Message):

    await message.answer(welcome_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@task_router.message(Command("add_task"))
async def cmd_add_task(message: types.Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_task"))
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å? –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É.", reply_markup=builder.as_markup())
    await state.set_state(AddTask.waiting_for_description)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
@task_router.callback_query(F.data == "cancel_add_task")
async def process_cancel_add_task(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
    await callback_query.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", show_alert=False)


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await callback_query.message.answer(welcome_text)
    await callback_query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

@task_router.message(AddTask.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(description=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–µ–¥–ª–∞–π–Ω) —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
                         reply_markup=await simple_calendar.start_calendar())
    await state.set_state(AddTask.waiting_for_deadline)


@task_router.callback_query(SimpleCalendarCallback.filter(), AddTask.waiting_for_deadline)
async def process_add_deadline_calendar(callback_query: types.CallbackQuery, callback_data: SimpleCalendarCallback,
                                        state: FSMContext):
    selected, date = await simple_calendar.process_selection(callback_query, callback_data)
    if selected:
        user_id = callback_query.from_user.id
        data = await state.get_data()
        description = data['description']
        deadline_str = f"{date.strftime('%Y-%m-%d')}"

        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()

        cursor.execute("SELECT MAX(task_number) FROM tasks WHERE user_id = ?", (user_id,))
        max_task_number = cursor.fetchone()[0]
        new_task_number = (max_task_number or 0) + 1

        # –í—Å—Ç–∞–≤–ª—è–µ–º remind_me = 0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cursor.execute("INSERT INTO tasks (user_id, task_number, description, deadline, status, remind_me) VALUES (?, ?, ?, ?, ?, ?)",
                       (user_id, new_task_number, description, deadline_str, 'active', 0))
        internal_task_id = cursor.lastrowid # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        conn.commit()
        conn.close()

        formatted_deadline_display = format_deadline(deadline_str)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        await callback_query.message.edit_text(
            f"‚úç –ó–∞–¥–∞—á–∞ '{description}' (–ù–æ–º–µ—Ä: {new_task_number}) —Å–æ —Å—Ä–æ–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è '{formatted_deadline_display}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

        #–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ö–û–ù–ö–†–ï–¢–ù–û–ô –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞)
        reminder_text = "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –Ω–∞–ø–æ–º–Ω–∏–ª –≤–∞–º –æ –∑–∞–¥–∞—á–µ, –∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá"
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–¥–∞—á–µ",
            callback_data=EnableReminderForTaskCallback(task_internal_id=internal_task_id).pack()
        ))
        builder.add(types.InlineKeyboardButton(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=MainMenuCallback().pack()
        ))
        builder.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞
        await callback_query.message.answer(reminder_text, reply_markup=builder.as_markup())

        await state.clear()
        await callback_query.answer()
    else:
        await callback_query.answer()

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
@task_router.callback_query(EnableReminderForTaskCallback.filter())
async def process_enable_reminder_for_task_callback(callback_query: types.CallbackQuery, callback_data: EnableReminderForTaskCallback):
    task_id_to_remind = callback_data.task_internal_id
    user_id = callback_query.from_user.id

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE tasks SET remind_me = 1 WHERE id = ? AND user_id = ? AND status = 'active'",
                       (task_id_to_remind, user_id))
        conn.commit()

        # –¢–∞–∫–∂–µ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ user_reminder_status –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        cursor.execute("INSERT OR IGNORE INTO user_reminder_status (user_id, last_reminded_at) VALUES (?, ?)",
                       (user_id, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        conn.commit()

        await callback_query.message.edit_text(
            "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–ª–∞—Ö —Ä–∞–∑ –≤ —á–∞—Å.",
            reply_markup=get_reminder_confirmation_keyboard() # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–†–´
        )
    except Exception as e:
        logging.error(f"Error enabling reminder for task {task_id_to_remind} by user {user_id}: {e}")
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=get_main_menu_inline_keyboard())
    finally:
        conn.close()
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reminders (–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏)
@task_router.message(Command("reminders"))
async def cmd_reminders(message: types.Message):
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    remindable_tasks = get_tasks_for_user(user_id, filter_type="all", status_filter='active', remind_me_filter=True)

    if not remindable_tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=get_main_menu_inline_keyboard())
        return

    keyboard = build_reminders_keyboard(remindable_tasks, page=0)
    await message.answer("üîî –í–∞—à–∏ –∑–∞–¥–∞—á–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å):", reply_markup=keyboard)


#  –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
@task_router.callback_query(RemindersMenuCallback.filter())
async def process_reminders_menu_callback(callback_query: types.CallbackQuery, callback_data: RemindersMenuCallback):
    user_id = callback_query.from_user.id
    current_page = callback_data.page

    remindable_tasks = get_tasks_for_user(user_id, filter_type="all", status_filter='active', remind_me_filter=True)

    if not remindable_tasks and current_page == 0: # –ï—Å–ª–∏ –∑–∞–¥–∞—á –±–æ–ª—å—à–µ –Ω–µ—Ç –∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        await callback_query.message.edit_text("–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–¥–∞—á —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.", reply_markup=get_main_menu_inline_keyboard())
        await callback_query.answer()
        return

    keyboard = build_reminders_keyboard(remindable_tasks, page=current_page)
    try:
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)
    except aiogram.exceptions.TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise e
    await callback_query.answer()


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
@task_router.callback_query(RemoveTaskReminderCallback.filter())
async def process_remove_task_reminder_callback(callback_query: types.CallbackQuery, callback_data: RemoveTaskReminderCallback):
    task_id_to_remove_reminder = callback_data.task_internal_id
    current_page = callback_data.current_page
    user_id = callback_query.from_user.id

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE tasks SET remind_me = 0 WHERE id = ? AND user_id = ?",
                       (task_id_to_remove_reminder, user_id))
        conn.commit()
        await callback_query.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.", show_alert=False)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        remindable_tasks = get_tasks_for_user(user_id, filter_type="all", status_filter='active', remind_me_filter=True)
        if not remindable_tasks:
            await callback_query.message.edit_text("–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–¥–∞—á —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.", reply_markup=get_main_menu_inline_keyboard())
        else:
            keyboard = build_reminders_keyboard(remindable_tasks, page=current_page)
            try:
                await callback_query.message.edit_reply_markup(reply_markup=keyboard)
            except aiogram.exceptions.TelegramBadRequest as e:
                if "message is not modified" not in str(e):
                    raise e

    except Exception as e:
        logging.error(f"Error removing reminder for task {task_id_to_remove_reminder} by user {user_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", show_alert=True)
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        remindable_tasks = get_tasks_for_user(user_id, filter_type="all", status_filter='active', remind_me_filter=True)
        keyboard = build_reminders_keyboard(remindable_tasks, page=current_page)
        try:
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        except aiogram.exceptions.TelegramBadRequest:
            pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    finally:
        conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@task_router.callback_query(DisableAllRemindersCallback.filter())
async def process_disable_all_reminders_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("UPDATE tasks SET remind_me = 0 WHERE user_id = ? AND status = 'active'", (user_id,))
        conn.commit()

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_reminder_status, —á—Ç–æ–±—ã –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ª—É—á–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        cursor.execute("DELETE FROM user_reminder_status WHERE user_id = ?", (user_id,))
        conn.commit()

        await callback_query.message.edit_text(
            "–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /reminders.", # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /reminders
            reply_markup=get_main_menu_inline_keyboard()
        )
    except Exception as e:
        logging.error(f"Error disabling all reminders for user {user_id}: {e}")
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=get_main_menu_inline_keyboard())
    finally:
        conn.close()
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_tasks
@task_router.message(Command("list_tasks"))
async def cmd_list_tasks(message: types.Message):
    user_id = message.from_user.id
    await send_task_list(message, user_id, task_limit=1, status_filter='active', filter_type="all")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history_tasks
@task_router.message(Command("history_tasks"))
async def cmd_history_tasks(message: types.Message):
    user_id = message.from_user.id
    await send_task_list(message, user_id, filter_type="history_all", status_filter='completed')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
@task_router.callback_query(TaskListFilterCallback.filter())
async def process_task_list_filter_callback(callback_query: types.CallbackQuery, callback_data: TaskListFilterCallback):
    user_id = callback_query.from_user.id
    filter_type = callback_data.filter_type

    status_filter = 'active'
    if filter_type == "history_all":
        status_filter = 'completed'

    await send_task_list(callback_query, user_id, filter_type=filter_type, status_filter=status_filter)

    #–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    if filter_type == "today":
        await callback_query.answer("–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", show_alert=False)
    elif filter_type == "week":
        await callback_query.answer("–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é", show_alert=False)
    elif filter_type == "month":
        await callback_query.answer("–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –º–µ—Å—è—Ü", show_alert=False)
    elif filter_type == "all":
        await callback_query.answer("–í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏", show_alert=False)
    else:
        await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É" —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –≤ callback
@task_router.callback_query(TaskActionCallback.filter())
async def process_complete_task_action(callback_query: types.CallbackQuery, callback_data: TaskActionCallback,
                                       state: FSMContext):
    action = callback_data.action
    if action.startswith("complete_task"):
        parts = action.split("_", 2)
        filter_type = parts[2] if len(parts) > 2 else "all"
        user_id = callback_query.from_user.id

        tasks = get_tasks_for_user(user_id, filter_type=filter_type, status_filter='active')

        if not tasks:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", show_alert=True)
            return

        # –í–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        keyboard = build_complete_task_keyboard(tasks, filter_type, page=0)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        except aiogram.exceptions.TelegramBadRequest as e:
            # –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞–∫–∞—è –∂–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            if "message is not modified" not in str(e):
                raise e

        await callback_query.answer()
    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ / –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@task_router.callback_query(CompleteTaskCallback.filter())
async def process_complete_task_callback(callback_query: types.CallbackQuery, callback_data: CompleteTaskCallback, state: FSMContext):
    user_id = callback_query.from_user.id
    filter_type = callback_data.filter_type
    page = callback_data.page
    selected_task_number = callback_data.task_number

    tasks = get_tasks_for_user(user_id, filter_type=filter_type, status_filter='active')

    if selected_task_number is not None:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT description FROM tasks WHERE user_id = ? AND task_number = ? AND status = 'active'",
                       (user_id, selected_task_number))
        task_info = cursor.fetchone()
        if not task_info:
            await callback_query.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
            conn.close()
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            keyboard = build_complete_task_keyboard(tasks, filter_type, page)
            try:
                await callback_query.message.edit_reply_markup(reply_markup=keyboard)
            except aiogram.exceptions.TelegramBadRequest as e:
                if "message is not modified" not in str(e):
                    raise e
            return
        task_description = task_info[0]

        cursor.execute("UPDATE tasks SET status = 'completed', remind_me = 0 WHERE user_id = ? AND task_number = ? AND status = 'active'", #  remind_me = 0 –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                       (user_id, selected_task_number))
        conn.commit()
        conn.close()

        if cursor.rowcount > 0:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await send_task_list(callback_query.message, user_id, filter_type=filter_type, status_filter='active')
            await callback_query.answer(f"–ó–∞–¥–∞—á–∞ '{task_description}' (–ù–æ–º–µ—Ä: {selected_task_number}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        else:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É.", show_alert=True)
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard = build_complete_task_keyboard(tasks, filter_type, page=page)
        try:
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        except aiogram.exceptions.TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise e
        await callback_query.answer()


#  –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@task_router.message(Command("edit_task"))
async def cmd_edit_task(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    tasks = get_tasks_for_user(user_id, filter_type="all", status_filter='active')

    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=get_main_menu_inline_keyboard())
        await state.clear()
        return

    keyboard = build_edit_task_keyboard(tasks, page=0)
    await message.answer("‚úè –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    # State is not set here, it will be set by the callback handler once a task is selected.


@task_router.callback_query(EditTaskCallback.filter())
async def process_edit_task_callback(callback_query: types.CallbackQuery, callback_data: EditTaskCallback,
                                     state: FSMContext):
    user_id = callback_query.from_user.id
    tasks = get_tasks_for_user(user_id, filter_type="all", status_filter='active')

    if not tasks:
        await callback_query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                                               reply_markup=get_main_menu_inline_keyboard())
        await callback_query.answer()
        return

    if callback_data.action == "view":
        # Handle pagination
        keyboard = build_edit_task_keyboard(tasks, page=callback_data.page)
        try:
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        except aiogram.exceptions.TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise e
        await callback_query.answer()
    elif callback_data.action == "select":
        # User selected a task
        selected_task_number = callback_data.task_number

        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id, task_number, description, deadline FROM tasks WHERE user_id = ? AND task_number = ? AND status = 'active'",
            (user_id, selected_task_number))
        task = cursor.fetchone()
        conn.close()

        if not task:
            await callback_query.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
            keyboard = build_edit_task_keyboard(tasks, page=callback_data.page)
            try:
                await callback_query.message.edit_text(
                    "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.", reply_markup=keyboard)
            except aiogram.exceptions.TelegramBadRequest as e:
                if "message is not modified" not in str(e):
                    raise e
            return

        internal_db_id = task[0]
        task_number_for_user = task[1]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º deadline_display –∑–¥–µ—Å—å
        formatted_current_deadline_display = format_deadline(task[3])
        deadline_display = f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {formatted_current_deadline_display}" if formatted_current_deadline_display else "–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –Ω–µ —É–∫–∞–∑–∞–Ω"

        await state.update_data(editing_internal_db_id=internal_db_id, editing_task_number=task_number_for_user)
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ"), types.KeyboardButton(text="–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")],
                [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await callback_query.message.delete()  # –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboardMarkup
        await callback_query.message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É —Å –Ω–æ–º–µ—Ä–æ–º {task_number_for_user}.\n–û–ø–∏—Å–∞–Ω–∏–µ: {task[2]}\n{deadline_display}\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? ‚úèÔ∏è",
            reply_markup=keyboard)
        await state.set_state(EditTask.waiting_for_new_data)
        await callback_query.answer()


@task_router.message(EditTask.waiting_for_new_data, F.text.in_({"–û–ø–∏—Å–∞–Ω–∏–µ", "–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "–û—Ç–º–µ–Ω–∞"}))
async def process_edit_field_selection(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                             reply_markup=get_main_menu_inline_keyboard())
        await state.clear()
        return

    if message.text == "–û–ø–∏—Å–∞–Ω–∏–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(EditTask.waiting_for_new_description)
    elif message.text == "–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
                             reply_markup=await simple_calendar.start_calendar())
        await state.set_state(EditTask.waiting_for_new_deadline)


@task_router.message(EditTask.waiting_for_new_description)
async def process_new_description(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–æ–º.",
                             reply_markup=get_main_menu_inline_keyboard())
        return

    data = await state.get_data()
    internal_db_id = data['editing_internal_db_id']
    task_number_for_user = data['editing_task_number']
    new_description = message.text

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE tasks SET description = ? WHERE id = ? AND user_id = ? AND status = 'active'",
                   (new_description, internal_db_id, message.from_user.id))
    conn.commit()
    conn.close()

    if cursor.rowcount > 0:
        await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–ù–æ–º–µ—Ä: {task_number_for_user}) –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: '{new_description}'",
                             reply_markup=get_main_menu_inline_keyboard())
    else:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.",
            reply_markup=get_main_menu_inline_keyboard())
    await state.clear()


@task_router.callback_query(SimpleCalendarCallback.filter(), EditTask.waiting_for_new_deadline)
async def process_edit_deadline_calendar(callback_query: types.CallbackQuery, callback_data: SimpleCalendarCallback,
                                         state: FSMContext):
    selected, date = await simple_calendar.process_selection(callback_query, callback_data)
    if selected:
        data = await state.get_data()
        internal_db_id = data['editing_internal_db_id']
        task_number_for_user = data['editing_task_number']
        user_id = callback_query.from_user.id
        deadline_str = f"{date.strftime('%Y-%m-%d')}"

        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET deadline = ? WHERE id = ? AND user_id = ? AND status = 'active'",
                       (deadline_str, internal_db_id, user_id))
        conn.commit()
        conn.close()

        if cursor.rowcount > 0:
            formatted_deadline_display = format_deadline(deadline_str)
            await callback_query.message.edit_text(
                f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–ù–æ–º–µ—Ä: {task_number_for_user}) –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: '{formatted_deadline_display}'",
                reply_markup=get_main_menu_inline_keyboard())
        else:
            await callback_query.message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.",
                reply_markup=get_main_menu_inline_keyboard())
        await state.clear()
        await callback_query.answer()
    else:
        await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@task_router.message(Command("delete_task"))
async def cmd_delete_task(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    tasks = get_tasks_for_user(user_id, filter_type="all", status_filter='active')

    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_main_menu_inline_keyboard())
        await state.clear()
        return

    keyboard = build_delete_task_keyboard(tasks, page=0)
    await message.answer("üóë –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    # State is not set here, it will be set by the callback handler once a task is selected.


@task_router.callback_query(DeleteTaskCallback.filter())
async def process_delete_task_callback(callback_query: types.CallbackQuery, callback_data: DeleteTaskCallback, state: FSMContext):
    user_id = callback_query.from_user.id
    tasks = get_tasks_for_user(user_id, filter_type="all", status_filter='active')

    if not tasks:
        await callback_query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_main_menu_inline_keyboard())
        await callback_query.answer()
        return

    if callback_data.action == "view":
        # Handle pagination
        keyboard = build_delete_task_keyboard(tasks, page=callback_data.page)
        try:
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        except aiogram.exceptions.TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise e
        await callback_query.answer()
    elif callback_data.action == "select":
        # User selected a task
        selected_task_number = callback_data.task_number

        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id, task_number, description, deadline FROM tasks WHERE user_id = ? AND task_number = ? AND status = 'active'",
            (user_id, selected_task_number))
        task = cursor.fetchone()
        conn.close()

        if not task:
            await callback_query.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
            keyboard = build_delete_task_keyboard(tasks, page=callback_data.page)
            try:
                await callback_query.message.edit_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.", reply_markup=keyboard)
            except aiogram.exceptions.TelegramBadRequest as e:
                if "message is not modified" not in str(e):
                    raise e
            return

        internal_db_id = task[0]
        task_number_for_user = task[1]
        task_description = task[2]

        await state.update_data(deleting_internal_db_id=internal_db_id, deleting_task_number=task_number_for_user,
                                deleting_task_desc=task_description)

        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–î–∞"), types.KeyboardButton(text="–ù–µ—Ç")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await callback_query.message.delete() # –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboardMarkup
        await callback_query.message.answer(
            f"üëÅ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É (–ù–æ–º–µ—Ä: {task_number_for_user}): '{task_description}'? (–î–∞/–ù–µ—Ç)",
            reply_markup=keyboard)
        await state.set_state(DeleteTask.waiting_for_confirmation)
        await callback_query.answer()


@task_router.message(DeleteTask.waiting_for_confirmation, F.text.in_({"–î–∞", "–ù–µ—Ç"}))
async def process_delete_confirmation(message: types.Message, state: FSMContext):
    if message.text == "–î–∞":
        data = await state.get_data()
        internal_db_id = data['deleting_internal_db_id']
        task_number_for_user = data['deleting_task_number']
        task_description = data['deleting_task_desc']
        user_id = message.from_user.id

        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        #  –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –Ω–µ–π —Ç–æ–∂–µ –æ—Ç–∫–ª—é—á–∞—é—Ç—Å—è.
        cursor.execute("DELETE FROM tasks WHERE id = ? AND user_id = ? AND status = 'active'",
                       (internal_db_id, user_id))
        conn.commit()
        conn.close()

        if cursor.rowcount > 0:
            await message.answer(f"–ó–∞–¥–∞—á–∞ '{task_description}' (–ù–æ–º–µ—Ä: {task_number_for_user}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                                 reply_markup=get_main_menu_inline_keyboard())
        else:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.",
                reply_markup=get_main_menu_inline_keyboard())
    else:
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_inline_keyboard())
    await state.clear()


#  –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_hourly_reminders(bot: Bot):
    while True:
        await asyncio.sleep(3600)  # –ñ–¥–µ–º 1 —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥)
        logging.info("Running hourly reminders check...")
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º user_id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ —Å remind_me = 1
        # –ò –≥–¥–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∏–ª–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ) —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø–æ—Ä–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å
        cursor.execute("""
            SELECT DISTINCT t.user_id, urs.last_reminded_at
            FROM tasks t
            JOIN user_reminder_status urs ON t.user_id = urs.user_id
            WHERE t.remind_me = 1 AND t.status = 'active'
        """)
        users_to_check = cursor.fetchall()

        current_time = datetime.now()

        for user_id, last_reminded_str in users_to_check:
            should_remind = False
            if not last_reminded_str:
                should_remind = True  # –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∏, —Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º
            else:
                last_reminded_dt = datetime.strptime(last_reminded_str, '%Y-%m-%d %H:%M:%S')
                # –ï—Å–ª–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ—à–µ–ª —á–∞—Å –∏–ª–∏ –±–æ–ª–µ–µ
                if (current_time - last_reminded_dt) >= timedelta(hours=1):
                    should_remind = True

            if should_remind:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –°–ï–ì–û–î–ù–Ø, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                today_date_str = current_time.strftime('%Y-%m-%d')
                cursor.execute("""
                    SELECT COUNT(*) FROM tasks
                    WHERE user_id = ? AND status = 'active' AND deadline = ? AND remind_me = 1
                """, (user_id, today_date_str))
                active_today_remindable_task_count = cursor.fetchone()[0]

                if active_today_remindable_task_count > 0:
                    reminder_message = f"–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è {active_today_remindable_task_count} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —è –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–æ–º–Ω–∏—Ç—å!"
                    builder = InlineKeyboardBuilder()
                    builder.add(types.InlineKeyboardButton(
                        text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏",
                        callback_data=TaskListFilterCallback(filter_type="today").pack() # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                    ))
                    try:
                        await bot.send_message(chat_id=user_id, text=reminder_message, reply_markup=builder.as_markup())
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ user_reminder_status
                        cursor.execute("UPDATE user_reminder_status SET last_reminded_at = ? WHERE user_id = ?",
                                       (current_time.strftime('%Y-%m-%d %H:%M:%S'), user_id))
                        conn.commit()
                        logging.info(f"Reminder sent to user {user_id} for {active_today_remindable_task_count} today's remindable tasks.")
                    except aiogram.exceptions.TelegramForbiddenError:
                        logging.warning(f"Bot blocked by user {user_id}. Removing from user_reminder_status and setting remind_me=0 for their tasks.")
                        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_reminder_status, –µ—Å–ª–∏ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                        cursor.execute("DELETE FROM user_reminder_status WHERE user_id = ?", (user_id,))
                        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        cursor.execute("UPDATE tasks SET remind_me = 0 WHERE user_id = ?", (user_id,))
                        conn.commit()
                    except Exception as e:
                        logging.error(f"Error sending reminder to user {user_id}: {e}")
        conn.close()


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    init_db()
    dp.include_router(welcome_router)
    dp.include_router(task_router)
    #  –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    asyncio.create_task(send_hourly_reminders(bot))
    await dp.start_polling(bot)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

